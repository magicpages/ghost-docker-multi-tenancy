version: '3.8'

# Tinybird Setup Services
# Run once to initialize Tinybird with Ghost schema

services:
  # Extract Tinybird files from Ghost image and adapt for Tinybird Local
  tinybird-sync:
    image: ghost:6-alpine
    profiles: ["setup"]
    volumes:
      - tinybird_files:/data/tinybird
    command: >
      sh -c "
        if [ -d /var/lib/ghost/versions/*/core/server/data/tinybird ]; then
          echo 'Copying Tinybird files from Ghost container...';
          cp -r /var/lib/ghost/versions/*/core/server/data/tinybird/* /data/tinybird/;
          echo 'Tinybird files copied successfully!';
        else
          echo 'ERROR: Tinybird source directory not found';
          exit 1;
        fi
      "
    networks:
      - ghost_network

  # Deploy Tinybird project to local instance using Tinybird Local's own tb CLI
  tinybird-deploy:
    image: tinybirdco/tinybird-local:latest
    profiles: ["setup"]
    volumes:
      - tinybird_files:/data/tinybird
    environment:
      - TB_TOKEN=${TINYBIRD_ADMIN_TOKEN}
      - TB_HOST=http://tinybird-local:7181
    command: >
      sh -c "
        cd /data/tinybird &&
        echo 'Getting admin token from Tinybird Local...' &&
        TOKEN=$$(curl -s http://tinybird-local:7181/tokens | python -c 'import json,sys;print(json.load(sys.stdin)[\"workspace_admin_token\"])') &&
        echo 'Extracted token:' $$TOKEN &&
        if [ -z \"$$TOKEN\" ] || [ \"$$TOKEN\" = \"null\" ]; then
          echo 'ERROR: Token is empty or null, cannot authenticate' &&
          exit 1;
        fi &&
        echo 'Pushing Tinybird project using Local tb CLI...' &&
        export TB_TOKEN=$$TOKEN &&
        export TB_HOST=http://tinybird-local:7181 &&
        tb push --force
      "
    networks:
      - ghost_network
    depends_on:
      - tinybird-sync

networks:
  ghost_network:
    external: true
    name: ${COMPOSE_PROJECT_NAME:-ghost}_ghost_network

volumes:
  tinybird_files: